<?php
// $Id: openpgp_gpg.admin.inc,v 1.2 2009/09/24 15:14:29 arto Exp $

//////////////////////////////////////////////////////////////////////////////
// Settings form

function openpgp_gpg_admin_settings() {
  module_load_include('inc', 'openpgp', 'openpgp');
  module_load_include('inc', 'openpgp_gpg', 'openpgp_gpg');

  // GNU Privacy Guard configuration
  $form['config'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('GNU Privacy Guard configuration'),
    '#collapsible'   => TRUE,
    '#collapsed'     => FALSE,
  );
  $form['config']['openpgp_gpg_exec'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Path to GnuPG executable'),
    '#default_value' => OpenPGP_GPG::binpath(),
    '#maxlength'     => 255,
    '#required'      => TRUE,
    '#description'   => t('A file system path to the <code>gpg</code> binary. On Unix systems, this would typically be located at <code>/usr/bin/gpg</code> or <code>/usr/local/bin/gpg</code>. On Mac OS X with MacPorts, the path would typically be <code>/opt/local/bin/gpg</code>.'),
  );
  $form['config']['openpgp_gpg_homedir'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Path to GnuPG home directory'),
    '#default_value' => OpenPGP_GPG::homedir(),
    '#maxlength'     => 255,
    '#required'      => TRUE,
    '#description'   => t('A file system path to the directory where <code>gpg</code> stores its configuration and keyrings. On Unix systems, this would typically be located at %path. If the directory doesn\'t exist, an attempt will be made to create it. Note that as this directory contains GnuPG\'s secure keyring, it is <strong>essential</strong> that you ensure the directory\'s access permissions are correctly set (i.e. not world-readable) and that the directory is not web accessible. Remember: security will only be as strong as the weakest link in the chain. For more information, please refer to the OpenPGP module\'s <code>INSTALL.txt</code> file.', array('%path' => '~/.gnupg')),
  );
  $form['config']['openpgp_gpg_options'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Path to GnuPG configuration file'),
    '#default_value' => variable_get('openpgp_gpg_options', ''),
    '#maxlength'     => 255,
    '#required'      => FALSE,
    '#description'   => t('A file system path to an optional <code>gpg</code> configuration file. If specified, GnuPG will be invoked with an <tt>--options <em>path</em></tt> argument. See the GnuPG manual for a description of the configuration file format.'),
  );

  // GNU Privacy Guard options
  $form['options'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('GNU Privacy Guard options'),
    '#collapsible'   => TRUE,
    '#collapsed'     => TRUE,
  );
  $form['options']['openpgp_gpg_compatibility'] = array(
    '#type'          => 'select',
    '#title'         => t('Force a specific GnuPG interoperability mode'),
    '#default_value' => variable_get('openpgp_gpg_compatibility', ''),
    '#options'       => array(
      ''        => t('<default>'),
      'gnupg'   => t('GnuPG'),
      'openpgp' => t('OpenPGP'),
      'rfc4880' => t('RFC 4880'),
      'rfc2440' => t('RFC 2440'),
      'rfc1991' => t('RFC 1991'),
      'pgp2'    => t('PGP 2.x'),
      'pgp6'    => t('PGP 6.x'),
      'pgp7'    => t('PGP 7.x'),
      'pgp8'    => t('PGP 8.x'),
      ),
    '#description'   => t('The default setting is nearly always the one you want. Don\'t mess with this setting unless you truly understand what you are doing.'),
  );
  $form['options']['openpgp_gpg_no_emit_version'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Do not include the GnuPG version header in ASCII-armored output'),
    '#default_value' => variable_get('openpgp_gpg_no_emit_version', ''),
    '#description'   => t('This invokes GnuPG with the <tt>--no-emit-version</tt> argument, which prevents the <tt>Version</tt> header being included in ASCII-armored messages generated by GnuPG. This version information is purely advisory and can safely be omitted if you so wish.'),
  );
  $form['options']['openpgp_gpg_throw_keyids'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Do not put the recipient key IDs into encrypted messages'),
    '#default_value' => variable_get('openpgp_gpg_throw_keyids', ''),
    '#description'   => t('This invokes GnuPG with the <tt>--throw-keyids</tt> argument, which helps to hide the receivers of a message and is a limited countermeasure against traffic analysis. On the receiving side, it may slow down the decryption process because all available secret keys must be tried in order to recover the plaintext.'),
  );

  return array_merge_recursive(system_settings_form($form), array('buttons' => array('#weight' => 99)));
}

function openpgp_gpg_admin_settings_validate($form, &$form_state) {
  extract($form_state['values'], EXTR_SKIP | EXTR_REFS);

  if (!file_exists($openpgp_gpg_exec)) {
    form_set_error('openpgp_gpg_exec', t('The GnuPG binary %path does not exist.', array('%path' => $openpgp_gpg_exec)));
  }
  else if (!is_executable($openpgp_gpg_exec)) {
    form_set_error('openpgp_gpg_exec', t('The GnuPG binary %path is not executable.', array('%path' => $openpgp_gpg_exec)));
  }

  openpgp_gpg_secure_homedir($openpgp_gpg_homedir = rtrim($openpgp_gpg_homedir, '/\\'), 'openpgp_gpg_homedir');
}

//////////////////////////////////////////////////////////////////////////////
// Helper functions

/**
 * Attempts to make secure the GnuPG home directory by setting access
 * permissions and writing a .htaccess file.
 */
function openpgp_gpg_secure_homedir($directory, $form_item = NULL) {
  // Check if the directory exists, and attempt to automatically create if it doesn't:
  if (!is_dir($directory)) {
    if (!@mkdir($directory)) {
      if ($form_item) {
        form_set_error($form_item, t('The GnuPG home directory %directory does not exist and could not be automatically created. Please create and secure it manually and try again.', array('%directory' => $directory)));
      }
      return FALSE;
    }

    drupal_set_message(t('The GnuPG home directory %directory has been created.', array('%directory' => $directory)));

    // Prevent world-readability of the directory, if possible:
    if (!@chmod($directory, 0770)) { // TODO: should probably shell out to 'chmod' to just do an 'o-rwx'
      $warning = "Security warning: Couldn't set access permissions on the GnuPG home directory %directory. Please secure it manually to prevent access by any other user than the web server process.";
      drupal_set_message(t($warning, array('%directory' => $directory)), 'warning');
      watchdog('security', $warning, array('%directory' => $directory), WATCHDOG_WARNING);
    }

    // Attempt to create a .htaccess file to prevent any web access to the
    // directory. Any prudent administrator will likely have placed the
    // GnuPG home directory outside the web root, in which case this isn't
    // necessary and may produce a superfluous warning. However, to every
    // savvy user there will be a correspondingly larger number of careless
    // ones.
    if (!is_file($directory . '/.htaccess')) {
      $htaccess_lines = "SetHandler Drupal_Security_Do_Not_Remove\nOptions None\nOptions +FollowSymLinks\nDeny from all\n";
      if (is_writable($directory) && @file_put_contents($directory . '/.htaccess', $htaccess_lines) > 0) {
        @chmod($directory . '/.htaccess', 0660);
      }
      else {
        $warning = "Security warning: Couldn't write a <code>.htaccess</code> file in the GnuPG home directory. Please create a %htaccess file with the following contents: <code>!htaccess</code>";
        $variables = array('%directory' => $directory, '%htaccess' => $directory . '/.htaccess', '!htaccess' => '<br/>' . nl2br(check_plain($htaccess_lines)));
        drupal_set_message(t($warning, $variables), 'warning');
        watchdog('security', $warning, $variables, WATCHDOG_WARNING);
      }
    }
  }

  // Check if the directory is writable. Since GnuPG is executed using our
  // uid, things will fail if GnuPG can't create the keyring files. On the
  // other hand, the necessary files may already exist and the administrator
  // has simply decided to be cautious and only let the web server process
  // have read access to the directory. This would not necessarily be a
  // show-stopper, and simply means showing a potentially superfluous
  // warning.
  if (!is_writable($directory)) {
    $warning = "Security notice: The GnuPG home directory %directory is not writable by the web server process. Unless all the keyring files required by GnuPG already exist, this may prevent some OpenPGP operations from functioning correctly.";
    drupal_set_message(t($warning, array('%directory' => $directory)), 'warning');
  }

  return TRUE;
}
